#pragma once

#include "mono_wrapper/types.h"
#include "mono_wrapper/mono_wrapper_fwd.h"

namespace mono_wrapper
{
struct functions_t
{
    typedef void(__cdecl *mono_thread_suspend_all_other_threads_t)();
    typedef void(__cdecl *mono_thread_pool_cleanup_t)();
    typedef void(__cdecl *mono_threads_set_shutting_down_t)();
    typedef void(__cdecl *mono_runtime_set_shutting_down_t)();
    typedef gboolean(__cdecl *mono_domain_finalize_t)(MonoDomain* domain, int timeout);
    typedef void(__cdecl *mono_runtime_cleanup_t)(MonoDomain* domain);
    typedef MonoMethodDesc*(__cdecl *mono_method_desc_new_t)(const char* name, gboolean include_namespace);
    typedef MonoMethod*(__cdecl *mono_method_desc_search_in_image_t)(MonoMethodDesc* desc, MonoImage* image);
    typedef void(__cdecl *mono_verifier_set_mode_t)(MiniVerifierMode m);
    typedef void(__cdecl *mono_security_set_mode_t)(MonoSecurityMode m);
    typedef void(__cdecl *mono_add_internal_call_t)(const char* name, gconstpointer method);
    typedef void(__cdecl *mono_jit_cleanup_t)(MonoDomain* domain);
    typedef MonoDomain*(__cdecl *mono_jit_init_t)(const char* file);
    typedef MonoDomain*(__cdecl *mono_jit_init_version_t)(const char* file, const char* runtime_version);
    typedef int(__cdecl *mono_jit_exec_t)(MonoDomain* domain, MonoAssembly* assembly, int argc, char* argv[]);
    typedef MonoClass*(__cdecl *mono_class_from_name_t)(MonoImage* image, const char* name_space, const char* name);
    typedef MonoAssembly*(__cdecl *mono_domain_assembly_open_t)(MonoDomain* domain, const char* name);
    typedef MonoDomain*(__cdecl *mono_domain_create_appdomain_t)(const char* domainname, const char* configfile);
    typedef void(__cdecl *mono_domain_unload_t)(MonoDomain* domain);
    typedef MonoObject*(__cdecl *mono_object_new_t)(MonoDomain* domain, MonoClass* klass);
    typedef void(__cdecl *mono_runtime_object_init_t)(MonoObject* this_obj);
    typedef MonoObject*(__cdecl *mono_runtime_invoke_t)(MonoMethod* method, void* obj, void** params, MonoObject** exc);
    typedef void(__cdecl *mono_field_set_value_t)(MonoObject* obj, MonoClassField* field, void* value);
    typedef void(__cdecl *mono_field_get_value_t)(MonoObject* obj, MonoClassField* field, void* value);
    typedef int(__cdecl *mono_field_get_offset_t)(MonoClassField* field);
    typedef MonoClassField*(__cdecl *mono_class_get_fields_t)(MonoClass* klass, gpointer* iter);
    typedef MonoMethod*(__cdecl *mono_class_get_methods_t)(MonoClass* klass, gpointer* iter);
    typedef MonoDomain*(__cdecl *mono_domain_get_t)();
    typedef MonoDomain*(__cdecl *mono_get_root_domain_t)();
    typedef gint32(__cdecl *mono_domain_get_id_t)(MonoDomain* domain);
    typedef void(__cdecl *mono_assembly_foreach_t)(GFunc func, gpointer user_data);
    typedef void(__cdecl *mono_image_close_t)(MonoImage* image);
    typedef void(__cdecl *mono_unity_socket_security_enabled_set_t)(gboolean b);
    typedef const char*(__cdecl *mono_image_get_name_t)(MonoImage* image);
    typedef MonoClass*(__cdecl *mono_get_object_class_t)();
    typedef void(__cdecl *mono_set_commandline_arguments_t)(int i, const char* argv[], const char* s);
    typedef const char*(__cdecl *mono_field_get_name_t)(MonoClassField* field);
    typedef MonoType*(__cdecl *mono_field_get_type_t)(MonoClassField* field);
    typedef int(__cdecl *mono_type_get_type_t)(MonoType* type);
    typedef const char*(__cdecl *mono_method_get_name_t)(MonoMethod* method);
    typedef MonoImage*(__cdecl *mono_assembly_get_image_t)(MonoAssembly* assembly);
    typedef MonoClass*(__cdecl *mono_method_get_class_t)(MonoMethod* method);
    typedef MonoClass*(__cdecl *mono_object_get_class_t)(MonoObject* obj);
    typedef gboolean(__cdecl *mono_class_is_valuetype_t)(MonoClass* klass);
    typedef guint32(__cdecl *mono_signature_get_param_count_t)(MonoMethodSignature* sig);
    typedef char*(__cdecl *mono_string_to_utf8_t)(MonoString* string_obj);
    typedef MonoString*(__cdecl *mono_string_new_wrapper_t)(const char* text);
    typedef MonoClass*(__cdecl *mono_class_get_parent_t)(MonoClass* klass);
    typedef const char*(__cdecl *mono_class_get_namespace_t)(MonoClass* klass);
    typedef gboolean(__cdecl *mono_class_is_subclass_of_t)(MonoClass* klass, MonoClass* klassc, gboolean check_interfaces);
    typedef const char*(__cdecl *mono_class_get_name_t)(MonoClass* klass);
    typedef char*(__cdecl *mono_type_get_name_t)(MonoType* type);
    typedef MonoClass*(__cdecl *mono_type_get_class_t)(MonoType* type);
    typedef MonoException*(__cdecl *mono_exception_from_name_msg_t)(MonoImage* image, const char* name_space, const char* name, const char* msg);
    typedef void(__cdecl *mono_raise_exception_t)(MonoException* ex);
    typedef MonoClass*(__cdecl *mono_get_exception_class_t)();
    typedef MonoClass*(__cdecl *mono_get_array_class_t)();
    typedef MonoClass*(__cdecl *mono_get_string_class_t)();
    typedef MonoClass*(__cdecl *mono_get_int32_class_t)();
    typedef MonoArray*(__cdecl *mono_array_new_t)(MonoDomain* domain, MonoClass* eclass, guint32 n);
    typedef MonoArray*(__cdecl *mono_array_new_full_t)(MonoDomain* domain, MonoClass* array_class, guint32* lengths, guint32* lower_bounds);
    typedef MonoClass*(__cdecl *mono_array_class_get_t)(MonoClass* eclass, guint32 rank);
    typedef gint32(__cdecl *mono_class_array_element_size_t)(MonoClass* ac);
    typedef MonoObject*(__cdecl *mono_type_get_object_t)(MonoDomain* domain, MonoType* type);
    typedef MonoThread*(__cdecl *mono_thread_attach_t)(MonoDomain* domain);
    typedef void(__cdecl *mono_thread_detach_t)(MonoThread* thread);
    typedef MonoThread*(__cdecl *mono_thread_exit_t)();
    typedef MonoThread*(__cdecl *mono_thread_current_t)();
    typedef void(__cdecl *mono_thread_set_main_t)(MonoThread* thread);
    typedef void(__cdecl *mono_set_find_plugin_callback_t)(gconstpointer method);
    typedef void(__cdecl *mono_security_enable_core_clr_t)();
    typedef bool(__cdecl *mono_security_set_core_clr_platform_callback_t)(MonoCoreClrPlatformCB a);
    typedef MonoRuntimeUnhandledExceptionPolicy(__cdecl *mono_runtime_unhandled_exception_policy_get_t)();
    typedef void(__cdecl *mono_runtime_unhandled_exception_policy_set_t)(MonoRuntimeUnhandledExceptionPolicy policy);
    typedef MonoClass*(__cdecl *mono_class_get_nesting_type_t)(MonoClass* klass);
    typedef MonoVTable*(__cdecl *mono_class_vtable_t)(MonoDomain* domain, MonoClass* klass);
    typedef MonoReflectionMethod*(__cdecl *mono_method_get_object_t)(MonoDomain* domain, MonoMethod* method, MonoClass* refclass);
    typedef MonoMethodSignature*(__cdecl *mono_method_signature_t)(MonoMethod* method);
    typedef MonoType*(__cdecl *mono_signature_get_params_t)(MonoMethodSignature* sig, gpointer* iter);
    typedef MonoType*(__cdecl *mono_signature_get_return_type_t)(MonoMethodSignature* sig);
    typedef MonoType*(__cdecl *mono_class_get_type_t)(MonoClass* klass);
    typedef void(__cdecl *mono_set_ignore_version_and_key_when_finding_assemblies_already_loaded_t)(gboolean value);
    typedef void(__cdecl *mono_debug_init_t)(int format);
    typedef void(__cdecl *mono_debug_open_image_from_memory_t)(MonoImage* image, const char* raw_contents, int size);
    typedef guint32(__cdecl *mono_field_get_flags_t)(MonoClassField* field);
    typedef MonoImage*(__cdecl *mono_image_open_from_data_full_t)(const void* data, guint32 data_len, gboolean need_copy, int* status, gboolean ref_only);
    typedef MonoImage*(__cdecl *mono_image_open_from_data_with_name_t)(char* data, guint32 data_len, gboolean need_copy, int* status, gboolean refonly, const char* name);
    typedef MonoAssembly*(__cdecl *mono_assembly_load_from_t)(MonoImage* image, const char* fname, int* status);
    typedef MonoObject*(__cdecl *mono_value_box_t)(MonoDomain* domain, MonoClass* klass, gpointer val);
    typedef MonoImage*(__cdecl *mono_class_get_image_t)(MonoClass* klass);
    typedef char(__cdecl *mono_signature_is_instance_t)(MonoMethodSignature* signature);
    typedef MonoMethod*(__cdecl *mono_method_get_last_managed_t)();
    typedef MonoClass*(__cdecl *mono_get_enum_class_t)();
    typedef MonoType*(__cdecl *mono_class_get_byref_type_t)(MonoClass* klass);
    typedef void(__cdecl *mono_field_static_get_value_t)(MonoVTable* vt, MonoClassField* field, void* value);
    typedef void(__cdecl *mono_unity_set_embeddinghostname_t)(const char* name);
    typedef void(__cdecl *mono_set_assemblies_path_t)(const char* name);
    typedef guint32(__cdecl *mono_gchandle_new_t)(MonoObject* obj, gboolean pinned);
    typedef MonoObject*(__cdecl *mono_gchandle_get_target_t)(guint32 gchandle);
    typedef guint32(__cdecl *mono_gchandle_new_weakref_t)(MonoObject* obj, gboolean track_resurrection);
    typedef MonoObject*(__cdecl *mono_assembly_get_object_t)(MonoDomain* domain, MonoAssembly* assembly);
    typedef void(__cdecl *mono_gchandle_free_t)(guint32 gchandle);
    typedef MonoProperty*(__cdecl *mono_class_get_properties_t)(MonoClass* klass, gpointer* iter);
    typedef MonoMethod*(__cdecl *mono_property_get_get_method_t)(MonoProperty* prop);
    typedef MonoObject*(__cdecl *mono_object_new_alloc_specific_t)(MonoVTable* vtable);
    typedef MonoObject*(__cdecl *mono_object_new_specific_t)(MonoVTable* vtable);
    typedef void(__cdecl *mono_gc_collect_t)(int generation);
    typedef int(__cdecl *mono_gc_max_generation_t)();
    typedef MonoAssembly*(__cdecl *mono_image_get_assembly_t)(MonoImage* image);
    typedef MonoAssembly*(__cdecl *mono_assembly_open_t)(const char* filename, int* status);
    typedef gboolean(__cdecl *mono_class_is_enum_t)(MonoClass* klass);
    typedef gint32(__cdecl *mono_class_instance_size_t)(MonoClass* klass);
    typedef guint32(__cdecl *mono_object_get_size_t)(MonoObject* obj);
    typedef const char*(__cdecl *mono_image_get_filename_t)(MonoImage* image);
    typedef MonoAssembly*(__cdecl *mono_assembly_load_from_full_t)(MonoImage* image, const char* fname, int* status, gboolean refonly);
    typedef MonoClass*(__cdecl *mono_class_get_interfaces_t)(MonoClass* klass, gpointer* iter);
    typedef void(__cdecl *mono_assembly_close_t)(MonoAssembly* assembly);
    typedef MonoProperty*(__cdecl *mono_class_get_property_from_name_t)(MonoClass* klass, const char* name);
    typedef MonoMethod*(__cdecl *mono_class_get_method_from_name_t)(MonoClass* klass, const char* name, int param_count);
    typedef MonoClass*(__cdecl *mono_class_from_mono_type_t)(MonoType* image);
    typedef gboolean(__cdecl *mono_domain_set_t)(MonoDomain* domain, gboolean force);
    typedef void(__cdecl *mono_thread_push_appdomain_ref_t)(MonoDomain* domain);
    typedef void(__cdecl *mono_thread_pop_appdomain_ref_t)();
    typedef int(__cdecl *mono_runtime_exec_main_t)(MonoMethod* method, MonoArray* args, MonoObject** exc);
    typedef MonoImage*(__cdecl *mono_get_corlib_t)();
    typedef MonoClassField*(__cdecl *mono_class_get_field_from_name_t)(MonoClass* klass, const char* name);
    typedef guint32(__cdecl *mono_class_get_flags_t)(MonoClass* klass);
    typedef int(__cdecl *mono_parse_default_optimizations_t)(const char* p);
    typedef void(__cdecl *mono_set_defaults_t)(int verbose_level, guint32 opts);
    typedef void(__cdecl *mono_set_dirs_t)(const char* assembly_dir, const char* config_dir);
    typedef void(__cdecl *mono_jit_parse_options_t)(int argc, char* argv[]);
    typedef gpointer(__cdecl *mono_object_unbox_t)(MonoObject* o);
    typedef MonoObject*(__cdecl *mono_custom_attrs_get_attr_t)(MonoCustomAttrInfo* ainfo, MonoClass* attr_klass);
    typedef gboolean(__cdecl *mono_custom_attrs_has_attr_t)(MonoCustomAttrInfo* ainfo, MonoClass* attr_klass);
    typedef MonoCustomAttrInfo*(__cdecl *mono_custom_attrs_from_field_t)(MonoClass* klass, MonoClassField* field);
    typedef MonoCustomAttrInfo*(__cdecl *mono_custom_attrs_from_method_t)(MonoMethod* method);
    typedef MonoCustomAttrInfo*(__cdecl *mono_custom_attrs_from_class_t)(MonoClass* klass);
    typedef void(__cdecl *mono_custom_attrs_free_t)(MonoCustomAttrInfo* attr);
    typedef void(__cdecl *g_free_t)(void* p);
    typedef gboolean(__cdecl *mono_runtime_is_shutting_down_t)();
    typedef MonoMethod*(__cdecl *mono_object_get_virtual_method_t)(MonoObject* obj, MonoMethod* method);
    typedef gpointer(__cdecl *mono_jit_info_get_code_start_t)(MonoJitInfo* ji);
    typedef int(__cdecl *mono_jit_info_get_code_size_t)(MonoJitInfo* ji);
    typedef MonoClass*(__cdecl *mono_class_from_name_case_t)(MonoImage* image, const char* name_space, const char* name);
    typedef MonoClass*(__cdecl *mono_class_get_nested_types_t)(MonoClass* klass, gpointer* iter);
    typedef int(__cdecl *mono_class_get_userdata_offset_t)();
    typedef void*(__cdecl *mono_class_get_userdata_t)(MonoClass* klass);
    typedef void(__cdecl *mono_class_set_userdata_t)(MonoClass* klass, void* userdata);
    typedef void(__cdecl *mono_set_signal_chaining_t)(gboolean chain_signals);
    typedef LONG(__cdecl *mono_unity_seh_handler_t)(EXCEPTION_POINTERS* ep);
    typedef void(__cdecl *mono_unity_set_unhandled_exception_handler_t)(void* handler);
    typedef MonoObject*(__cdecl *mono_runtime_invoke_array_t)(MonoMethod* method, void* obj, MonoArray* params, MonoObject** exc);
    typedef char*(__cdecl *mono_array_addr_with_size_t)(MonoArray* array, int size, uintptr_t idx);
    typedef gunichar2*(__cdecl *mono_string_to_utf16_t)(MonoString* string_obj);
    typedef MonoClass*(__cdecl *mono_field_get_parent_t)(MonoClassField* field);
    typedef char*(__cdecl *mono_method_full_name_t)(MonoMethod* method, gboolean signature);
    typedef MonoObject*(__cdecl *mono_object_isinst_t)(MonoObject* obj, MonoClass* klass);
    typedef MonoString*(__cdecl *mono_string_new_len_t)(MonoDomain* domain, const char* text, guint length);
    typedef MonoString*(__cdecl *mono_string_from_utf16_t)(gunichar2* data);
    typedef MonoException*(__cdecl *mono_get_exception_argument_null_t)(const char* arg);
    typedef MonoClass*(__cdecl *mono_get_boolean_class_t)();
    typedef MonoClass*(__cdecl *mono_get_byte_class_t)();
    typedef MonoClass*(__cdecl *mono_get_char_class_t)();
    typedef MonoClass*(__cdecl *mono_get_int16_class_t)();
    typedef MonoClass*(__cdecl *mono_get_int64_class_t)();
    typedef MonoClass*(__cdecl *mono_get_single_class_t)();
    typedef MonoClass*(__cdecl *mono_get_double_class_t)();
    typedef gboolean(__cdecl *mono_class_is_generic_t)(MonoClass* klass);
    typedef gboolean(__cdecl *mono_class_is_inflated_t)(MonoClass* klass);
    typedef gboolean(__cdecl *unity_mono_method_is_generic_t)(MonoMethod* method);
    typedef gboolean(__cdecl *unity_mono_method_is_inflated_t)(MonoMethod* method);
    typedef gboolean(__cdecl *mono_is_debugger_attached_t)();
    typedef gboolean(__cdecl *mono_assembly_fill_assembly_name_t)(MonoImage* image, MonoAssemblyName* aname);
    typedef char*(__cdecl *mono_stringify_assembly_name_t)(MonoAssemblyName* aname);
    typedef gboolean(__cdecl *mono_assembly_name_parse_t)(const char* name, MonoAssemblyName* aname);
    typedef MonoAssembly*(__cdecl *mono_assembly_loaded_t)(MonoAssemblyName* aname);
    typedef int(__cdecl *mono_image_get_table_rows_t)(MonoImage* image, int table_id);
    typedef MonoClass*(__cdecl *mono_class_get_t)(MonoImage* image, guint32 type_token);
    typedef gboolean(__cdecl *mono_metadata_signature_equal_t)(MonoMethodSignature* sig1, MonoMethodSignature* sig2);
    typedef gboolean(__cdecl *mono_gchandle_is_in_domain_t)(guint32 gchandle, MonoDomain* domain);
    typedef void(__cdecl *mono_stack_walk_t)(MonoStackWalk func, gpointer user_data);
    typedef char*(__cdecl *mono_pmip_t)(void* ip);
    typedef MonoObject*(__cdecl *mono_runtime_delegate_invoke_t)(MonoObject* delegate, void** params, MonoObject** exc);
    typedef MonoJitInfo*(__cdecl *mono_jit_info_table_find_t)(MonoDomain* domain, char* addr);
    typedef MonoDebugSourceLocation*(__cdecl *mono_debug_lookup_source_location_t)(MonoMethod* method, guint32 address, MonoDomain* domain);
    typedef void(__cdecl *mono_debug_free_source_location_t)(MonoDebugSourceLocation* location);
    typedef void(__cdecl *mono_gc_wbarrier_generic_store_t)(gpointer ptr, MonoObject* value);
    typedef MonoType*(__cdecl *mono_class_enum_basetype_t)(MonoClass* klass);
    typedef guint32(__cdecl *mono_class_get_type_token_t)(MonoClass* klass);
    typedef int(__cdecl *mono_class_get_rank_t)(MonoClass* klass);
    typedef MonoClass*(__cdecl *mono_class_get_element_class_t)(MonoClass* klass);
    typedef gboolean(__cdecl *mono_unity_class_is_interface_t)(MonoClass* klass);
    typedef gboolean(__cdecl *mono_unity_class_is_abstract_t)(MonoClass* klass);
    typedef gint32(__cdecl *mono_array_element_size_t)(MonoClass* ac);
    typedef void(__cdecl *mono_config_parse_t)(const char* filename);
    typedef void(__cdecl *mono_set_break_policy_t)(MonoBreakPolicyFunc policy_callback);
    typedef MonoArray*(__cdecl *mono_custom_attrs_construct_t)(MonoCustomAttrInfo* cinfo);
    typedef MonoCustomAttrInfo*(__cdecl *mono_custom_attrs_from_assembly_t)(MonoAssembly* assembly);
    typedef MonoArray*(__cdecl *mono_reflection_get_custom_attrs_by_type_t)(MonoObject* obj, MonoClass* attr_klass);
    typedef MonoLoaderError*(__cdecl *mono_loader_get_last_error_t)();
    typedef MonoException*(__cdecl *mono_loader_error_prepare_exception_t)(MonoLoaderError* error);
    typedef MonoDlFallbackHandler*(__cdecl *mono_dl_fallback_register_t)(MonoDlFallbackLoad load_func, MonoDlFallbackSymbol symbol_func, MonoDlFallbackClose close_func, void* user_data);
    typedef void(__cdecl *mono_dl_fallback_unregister_t)(MonoDlFallbackHandler* handler);
    typedef LivenessState*(__cdecl *mono_unity_liveness_allocate_struct_t)(MonoClass* filter, guint max_count, register_object_callback callback, void* callback_userdata);
    typedef void(__cdecl *mono_unity_liveness_stop_gc_world_t)();
    typedef void(__cdecl *mono_unity_liveness_finalize_t)(LivenessState* state);
    typedef void(__cdecl *mono_unity_liveness_start_gc_world_t)();
    typedef void(__cdecl *mono_unity_liveness_free_struct_t)(LivenessState* state);
    typedef LivenessState*(__cdecl *mono_unity_liveness_calculation_begin_t)(MonoClass* filter, guint max_count, register_object_callback callback, void* callback_userdata);
    typedef void(__cdecl *mono_unity_liveness_calculation_end_t)(LivenessState* state);
    typedef void(__cdecl *mono_unity_liveness_calculation_from_root_t)(MonoObject* root, LivenessState* state);
    typedef void(__cdecl *mono_unity_liveness_calculation_from_statics_t)(LivenessState* state);
    typedef void(__cdecl *mono_trace_set_level_string_t)(const char* value);
    typedef void(__cdecl *mono_trace_set_mask_string_t)(char* value);
    typedef gint64(__cdecl *mono_gc_get_used_size_t)();
    typedef gint64(__cdecl *mono_gc_get_heap_size_t)();
    typedef MonoMethod*(__cdecl *mono_method_desc_search_in_class_t)(MonoMethodDesc* desc, MonoClass* klass);
    typedef void(__cdecl *mono_method_desc_free_t)(MonoMethodDesc* desc);
    typedef char*(__cdecl *mono_type_get_name_full_t)(MonoType* type, MonoTypeNameFormat format);
    typedef void(__cdecl *mono_unity_thread_clear_domain_fields_t)();
    typedef void(__cdecl *mono_unity_set_vprintf_func_t)(vprintf_func func);
    typedef void(__cdecl *mono_profiler_install_t)(MonoProfiler* prof, MonoProfileFunc shutdown_callback);
    typedef void(__cdecl *mono_profiler_set_events_t)(MonoProfileFlags events);
    typedef void(__cdecl *mono_profiler_install_enter_leave_t)(MonoProfileMethodFunc enter, MonoProfileMethodFunc fleave);
    typedef void(__cdecl *mono_profiler_install_gc_t)(MonoProfileGCFunc callback, MonoProfileGCResizeFunc heap_resize_callback);
    typedef void(__cdecl *mono_profiler_install_allocation_t)(MonoProfileAllocFunc callback);
    typedef void(__cdecl *mono_profiler_install_jit_end_t)(MonoProfileJitResult end);
    typedef void(__cdecl *mono_profiler_install_exception_t)(MonoProfileExceptionFunc throw_callback, MonoProfileMethodFunc exc_method_leave, MonoProfileExceptionClauseFunc clause_callback);
    typedef void(__cdecl *mono_profiler_install_thread_t)(MonoProfileThreadFunc start, MonoProfileThreadFunc end);
    
    mono_thread_suspend_all_other_threads_t mono_thread_suspend_all_other_threads = nullptr;
    mono_thread_pool_cleanup_t mono_thread_pool_cleanup = nullptr;
    mono_threads_set_shutting_down_t mono_threads_set_shutting_down = nullptr;
    mono_runtime_set_shutting_down_t mono_runtime_set_shutting_down = nullptr;
    mono_domain_finalize_t mono_domain_finalize = nullptr;
    mono_runtime_cleanup_t mono_runtime_cleanup = nullptr;
    mono_method_desc_new_t mono_method_desc_new = nullptr;
    mono_method_desc_search_in_image_t mono_method_desc_search_in_image = nullptr;
    mono_verifier_set_mode_t mono_verifier_set_mode = nullptr;
    mono_security_set_mode_t mono_security_set_mode = nullptr;
    mono_add_internal_call_t mono_add_internal_call = nullptr;
    mono_jit_cleanup_t mono_jit_cleanup = nullptr;
    mono_jit_init_t mono_jit_init = nullptr;
    mono_jit_init_version_t mono_jit_init_version = nullptr;
    mono_jit_exec_t mono_jit_exec = nullptr;
    mono_class_from_name_t mono_class_from_name = nullptr;
    mono_domain_assembly_open_t mono_domain_assembly_open = nullptr;
    mono_domain_create_appdomain_t mono_domain_create_appdomain = nullptr;
    mono_domain_unload_t mono_domain_unload = nullptr;
    mono_object_new_t mono_object_new = nullptr;
    mono_runtime_object_init_t mono_runtime_object_init = nullptr;
    mono_runtime_invoke_t mono_runtime_invoke = nullptr;
    mono_field_set_value_t mono_field_set_value = nullptr;
    mono_field_get_value_t mono_field_get_value = nullptr;
    mono_field_get_offset_t mono_field_get_offset = nullptr;
    mono_class_get_fields_t mono_class_get_fields = nullptr;
    mono_class_get_methods_t mono_class_get_methods = nullptr;
    mono_domain_get_t mono_domain_get = nullptr;
    mono_get_root_domain_t mono_get_root_domain = nullptr;
    mono_domain_get_id_t mono_domain_get_id = nullptr;
    mono_assembly_foreach_t mono_assembly_foreach = nullptr;
    mono_image_close_t mono_image_close = nullptr;
    mono_unity_socket_security_enabled_set_t mono_unity_socket_security_enabled_set = nullptr;
    mono_image_get_name_t mono_image_get_name = nullptr;
    mono_get_object_class_t mono_get_object_class = nullptr;
    mono_set_commandline_arguments_t mono_set_commandline_arguments = nullptr;
    mono_field_get_name_t mono_field_get_name = nullptr;
    mono_field_get_type_t mono_field_get_type = nullptr;
    mono_type_get_type_t mono_type_get_type = nullptr;
    mono_method_get_name_t mono_method_get_name = nullptr;
    mono_assembly_get_image_t mono_assembly_get_image = nullptr;
    mono_method_get_class_t mono_method_get_class = nullptr;
    mono_object_get_class_t mono_object_get_class = nullptr;
    mono_class_is_valuetype_t mono_class_is_valuetype = nullptr;
    mono_signature_get_param_count_t mono_signature_get_param_count = nullptr;
    mono_string_to_utf8_t mono_string_to_utf8 = nullptr;
    mono_string_new_wrapper_t mono_string_new_wrapper = nullptr;
    mono_class_get_parent_t mono_class_get_parent = nullptr;
    mono_class_get_namespace_t mono_class_get_namespace = nullptr;
    mono_class_is_subclass_of_t mono_class_is_subclass_of = nullptr;
    mono_class_get_name_t mono_class_get_name = nullptr;
    mono_type_get_name_t mono_type_get_name = nullptr;
    mono_type_get_class_t mono_type_get_class = nullptr;
    mono_exception_from_name_msg_t mono_exception_from_name_msg = nullptr;
    mono_raise_exception_t mono_raise_exception = nullptr;
    mono_get_exception_class_t mono_get_exception_class = nullptr;
    mono_get_array_class_t mono_get_array_class = nullptr;
    mono_get_string_class_t mono_get_string_class = nullptr;
    mono_get_int32_class_t mono_get_int32_class = nullptr;
    mono_array_new_t mono_array_new = nullptr;
    mono_array_new_full_t mono_array_new_full = nullptr;
    mono_array_class_get_t mono_array_class_get = nullptr;
    mono_class_array_element_size_t mono_class_array_element_size = nullptr;
    mono_type_get_object_t mono_type_get_object = nullptr;
    mono_thread_attach_t mono_thread_attach = nullptr;
    mono_thread_detach_t mono_thread_detach = nullptr;
    mono_thread_exit_t mono_thread_exit = nullptr;
    mono_thread_current_t mono_thread_current = nullptr;
    mono_thread_set_main_t mono_thread_set_main = nullptr;
    mono_set_find_plugin_callback_t mono_set_find_plugin_callback = nullptr;
    mono_security_enable_core_clr_t mono_security_enable_core_clr = nullptr;
    mono_security_set_core_clr_platform_callback_t mono_security_set_core_clr_platform_callback = nullptr;
    mono_runtime_unhandled_exception_policy_get_t mono_runtime_unhandled_exception_policy_get = nullptr;
    mono_runtime_unhandled_exception_policy_set_t mono_runtime_unhandled_exception_policy_set = nullptr;
    mono_class_get_nesting_type_t mono_class_get_nesting_type = nullptr;
    mono_class_vtable_t mono_class_vtable = nullptr;
    mono_method_get_object_t mono_method_get_object = nullptr;
    mono_method_signature_t mono_method_signature = nullptr;
    mono_signature_get_params_t mono_signature_get_params = nullptr;
    mono_signature_get_return_type_t mono_signature_get_return_type = nullptr;
    mono_class_get_type_t mono_class_get_type = nullptr;
    mono_set_ignore_version_and_key_when_finding_assemblies_already_loaded_t mono_set_ignore_version_and_key_when_finding_assemblies_already_loaded = nullptr;
    mono_debug_init_t mono_debug_init = nullptr;
    mono_debug_open_image_from_memory_t mono_debug_open_image_from_memory = nullptr;
    mono_field_get_flags_t mono_field_get_flags = nullptr;
    mono_image_open_from_data_full_t mono_image_open_from_data_full = nullptr;
    mono_image_open_from_data_with_name_t mono_image_open_from_data_with_name = nullptr;
    mono_assembly_load_from_t mono_assembly_load_from = nullptr;
    mono_value_box_t mono_value_box = nullptr;
    mono_class_get_image_t mono_class_get_image = nullptr;
    mono_signature_is_instance_t mono_signature_is_instance = nullptr;
    mono_method_get_last_managed_t mono_method_get_last_managed = nullptr;
    mono_get_enum_class_t mono_get_enum_class = nullptr;
    mono_class_get_byref_type_t mono_class_get_byref_type = nullptr;
    mono_field_static_get_value_t mono_field_static_get_value = nullptr;
    mono_unity_set_embeddinghostname_t mono_unity_set_embeddinghostname = nullptr;
    mono_set_assemblies_path_t mono_set_assemblies_path = nullptr;
    mono_gchandle_new_t mono_gchandle_new = nullptr;
    mono_gchandle_get_target_t mono_gchandle_get_target = nullptr;
    mono_gchandle_new_weakref_t mono_gchandle_new_weakref = nullptr;
    mono_assembly_get_object_t mono_assembly_get_object = nullptr;
    mono_gchandle_free_t mono_gchandle_free = nullptr;
    mono_class_get_properties_t mono_class_get_properties = nullptr;
    mono_property_get_get_method_t mono_property_get_get_method = nullptr;
    mono_object_new_alloc_specific_t mono_object_new_alloc_specific = nullptr;
    mono_object_new_specific_t mono_object_new_specific = nullptr;
    mono_gc_collect_t mono_gc_collect = nullptr;
    mono_gc_max_generation_t mono_gc_max_generation = nullptr;
    mono_image_get_assembly_t mono_image_get_assembly = nullptr;
    mono_assembly_open_t mono_assembly_open = nullptr;
    mono_class_is_enum_t mono_class_is_enum = nullptr;
    mono_class_instance_size_t mono_class_instance_size = nullptr;
    mono_object_get_size_t mono_object_get_size = nullptr;
    mono_image_get_filename_t mono_image_get_filename = nullptr;
    mono_assembly_load_from_full_t mono_assembly_load_from_full = nullptr;
    mono_class_get_interfaces_t mono_class_get_interfaces = nullptr;
    mono_assembly_close_t mono_assembly_close = nullptr;
    mono_class_get_property_from_name_t mono_class_get_property_from_name = nullptr;
    mono_class_get_method_from_name_t mono_class_get_method_from_name = nullptr;
    mono_class_from_mono_type_t mono_class_from_mono_type = nullptr;
    mono_domain_set_t mono_domain_set = nullptr;
    mono_thread_push_appdomain_ref_t mono_thread_push_appdomain_ref = nullptr;
    mono_thread_pop_appdomain_ref_t mono_thread_pop_appdomain_ref = nullptr;
    mono_runtime_exec_main_t mono_runtime_exec_main = nullptr;
    mono_get_corlib_t mono_get_corlib = nullptr;
    mono_class_get_field_from_name_t mono_class_get_field_from_name = nullptr;
    mono_class_get_flags_t mono_class_get_flags = nullptr;
    mono_parse_default_optimizations_t mono_parse_default_optimizations = nullptr;
    mono_set_defaults_t mono_set_defaults = nullptr;
    mono_set_dirs_t mono_set_dirs = nullptr;
    mono_jit_parse_options_t mono_jit_parse_options = nullptr;
    mono_object_unbox_t mono_object_unbox = nullptr;
    mono_custom_attrs_get_attr_t mono_custom_attrs_get_attr = nullptr;
    mono_custom_attrs_has_attr_t mono_custom_attrs_has_attr = nullptr;
    mono_custom_attrs_from_field_t mono_custom_attrs_from_field = nullptr;
    mono_custom_attrs_from_method_t mono_custom_attrs_from_method = nullptr;
    mono_custom_attrs_from_class_t mono_custom_attrs_from_class = nullptr;
    mono_custom_attrs_free_t mono_custom_attrs_free = nullptr;
    g_free_t g_free = nullptr;
    mono_runtime_is_shutting_down_t mono_runtime_is_shutting_down = nullptr;
    mono_object_get_virtual_method_t mono_object_get_virtual_method = nullptr;
    mono_jit_info_get_code_start_t mono_jit_info_get_code_start = nullptr;
    mono_jit_info_get_code_size_t mono_jit_info_get_code_size = nullptr;
    mono_class_from_name_case_t mono_class_from_name_case = nullptr;
    mono_class_get_nested_types_t mono_class_get_nested_types = nullptr;
    mono_class_get_userdata_offset_t mono_class_get_userdata_offset = nullptr;
    mono_class_get_userdata_t mono_class_get_userdata = nullptr;
    mono_class_set_userdata_t mono_class_set_userdata = nullptr;
    mono_set_signal_chaining_t mono_set_signal_chaining = nullptr;
    mono_unity_seh_handler_t mono_unity_seh_handler = nullptr;
    mono_unity_set_unhandled_exception_handler_t mono_unity_set_unhandled_exception_handler = nullptr;
    mono_runtime_invoke_array_t mono_runtime_invoke_array = nullptr;
    mono_array_addr_with_size_t mono_array_addr_with_size = nullptr;
    mono_string_to_utf16_t mono_string_to_utf16 = nullptr;
    mono_field_get_parent_t mono_field_get_parent = nullptr;
    mono_method_full_name_t mono_method_full_name = nullptr;
    mono_object_isinst_t mono_object_isinst = nullptr;
    mono_string_new_len_t mono_string_new_len = nullptr;
    mono_string_from_utf16_t mono_string_from_utf16 = nullptr;
    mono_get_exception_argument_null_t mono_get_exception_argument_null = nullptr;
    mono_get_boolean_class_t mono_get_boolean_class = nullptr;
    mono_get_byte_class_t mono_get_byte_class = nullptr;
    mono_get_char_class_t mono_get_char_class = nullptr;
    mono_get_int16_class_t mono_get_int16_class = nullptr;
    mono_get_int64_class_t mono_get_int64_class = nullptr;
    mono_get_single_class_t mono_get_single_class = nullptr;
    mono_get_double_class_t mono_get_double_class = nullptr;
    mono_class_is_generic_t mono_class_is_generic = nullptr;
    mono_class_is_inflated_t mono_class_is_inflated = nullptr;
    unity_mono_method_is_generic_t unity_mono_method_is_generic = nullptr;
    unity_mono_method_is_inflated_t unity_mono_method_is_inflated = nullptr;
    mono_is_debugger_attached_t mono_is_debugger_attached = nullptr;
    mono_assembly_fill_assembly_name_t mono_assembly_fill_assembly_name = nullptr;
    mono_stringify_assembly_name_t mono_stringify_assembly_name = nullptr;
    mono_assembly_name_parse_t mono_assembly_name_parse = nullptr;
    mono_assembly_loaded_t mono_assembly_loaded = nullptr;
    mono_image_get_table_rows_t mono_image_get_table_rows = nullptr;
    mono_class_get_t mono_class_get = nullptr;
    mono_metadata_signature_equal_t mono_metadata_signature_equal = nullptr;
    mono_gchandle_is_in_domain_t mono_gchandle_is_in_domain = nullptr;
    mono_stack_walk_t mono_stack_walk = nullptr;
    mono_pmip_t mono_pmip = nullptr;
    mono_runtime_delegate_invoke_t mono_runtime_delegate_invoke = nullptr;
    mono_jit_info_table_find_t mono_jit_info_table_find = nullptr;
    mono_debug_lookup_source_location_t mono_debug_lookup_source_location = nullptr;
    mono_debug_free_source_location_t mono_debug_free_source_location = nullptr;
    mono_gc_wbarrier_generic_store_t mono_gc_wbarrier_generic_store = nullptr;
    mono_class_enum_basetype_t mono_class_enum_basetype = nullptr;
    mono_class_get_type_token_t mono_class_get_type_token = nullptr;
    mono_class_get_rank_t mono_class_get_rank = nullptr;
    mono_class_get_element_class_t mono_class_get_element_class = nullptr;
    mono_unity_class_is_interface_t mono_unity_class_is_interface = nullptr;
    mono_unity_class_is_abstract_t mono_unity_class_is_abstract = nullptr;
    mono_array_element_size_t mono_array_element_size = nullptr;
    mono_config_parse_t mono_config_parse = nullptr;
    mono_set_break_policy_t mono_set_break_policy = nullptr;
    mono_custom_attrs_construct_t mono_custom_attrs_construct = nullptr;
    mono_custom_attrs_from_assembly_t mono_custom_attrs_from_assembly = nullptr;
    mono_reflection_get_custom_attrs_by_type_t mono_reflection_get_custom_attrs_by_type = nullptr;
    mono_loader_get_last_error_t mono_loader_get_last_error = nullptr;
    mono_loader_error_prepare_exception_t mono_loader_error_prepare_exception = nullptr;
    mono_dl_fallback_register_t mono_dl_fallback_register = nullptr;
    mono_dl_fallback_unregister_t mono_dl_fallback_unregister = nullptr;
    mono_unity_liveness_allocate_struct_t mono_unity_liveness_allocate_struct = nullptr;
    mono_unity_liveness_stop_gc_world_t mono_unity_liveness_stop_gc_world = nullptr;
    mono_unity_liveness_finalize_t mono_unity_liveness_finalize = nullptr;
    mono_unity_liveness_start_gc_world_t mono_unity_liveness_start_gc_world = nullptr;
    mono_unity_liveness_free_struct_t mono_unity_liveness_free_struct = nullptr;
    mono_unity_liveness_calculation_begin_t mono_unity_liveness_calculation_begin = nullptr;
    mono_unity_liveness_calculation_end_t mono_unity_liveness_calculation_end = nullptr;
    mono_unity_liveness_calculation_from_root_t mono_unity_liveness_calculation_from_root = nullptr;
    mono_unity_liveness_calculation_from_statics_t mono_unity_liveness_calculation_from_statics = nullptr;
    mono_trace_set_level_string_t mono_trace_set_level_string = nullptr;
    mono_trace_set_mask_string_t mono_trace_set_mask_string = nullptr;
    mono_gc_get_used_size_t mono_gc_get_used_size = nullptr;
    mono_gc_get_heap_size_t mono_gc_get_heap_size = nullptr;
    mono_method_desc_search_in_class_t mono_method_desc_search_in_class = nullptr;
    mono_method_desc_free_t mono_method_desc_free = nullptr;
    mono_type_get_name_full_t mono_type_get_name_full = nullptr;
    mono_unity_thread_clear_domain_fields_t mono_unity_thread_clear_domain_fields = nullptr;
    mono_unity_set_vprintf_func_t mono_unity_set_vprintf_func = nullptr;
    mono_profiler_install_t mono_profiler_install = nullptr;
    mono_profiler_set_events_t mono_profiler_set_events = nullptr;
    mono_profiler_install_enter_leave_t mono_profiler_install_enter_leave = nullptr;
    mono_profiler_install_gc_t mono_profiler_install_gc = nullptr;
    mono_profiler_install_allocation_t mono_profiler_install_allocation = nullptr;
    mono_profiler_install_jit_end_t mono_profiler_install_jit_end = nullptr;
    mono_profiler_install_exception_t mono_profiler_install_exception = nullptr;
    mono_profiler_install_thread_t mono_profiler_install_thread = nullptr;
};

functions_t load_mono_functions_from_dll(HMODULE dll);
} // namespace mono_wrapper
