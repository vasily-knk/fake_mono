#pragma once

#include "executor.h"
#include "mono_wrapper/functions.h"

struct executor_base
    : executor
{
    executor_base(mono_wrapper::functions_cptr functions);

    void mono_thread_suspend_all_other_threads() override;
    void mono_thread_pool_cleanup() override;
    void mono_threads_set_shutting_down() override;
    void mono_runtime_set_shutting_down() override;
    gboolean mono_domain_finalize(MonoDomain* domain, int timeout) override;
    void mono_runtime_cleanup(MonoDomain* domain) override;
    MonoMethodDesc* mono_method_desc_new(const char* name, gboolean include_namespace) override;
    MonoMethod* mono_method_desc_search_in_image(MonoMethodDesc* desc, MonoImage* image) override;
    void mono_verifier_set_mode(MiniVerifierMode m) override;
    void mono_security_set_mode(MonoSecurityMode m) override;
    void mono_add_internal_call(const char* name, gconstpointer method) override;
    void mono_jit_cleanup(MonoDomain* domain) override;
    MonoDomain* mono_jit_init(const char* file) override;
    MonoDomain* mono_jit_init_version(const char* file, const char* runtime_version) override;
    int mono_jit_exec(MonoDomain* domain, MonoAssembly* assembly, int argc, char* argv[]) override;
    MonoClass* mono_class_from_name(MonoImage* image, const char* name_space, const char* name) override;
    MonoAssembly* mono_domain_assembly_open(MonoDomain* domain, const char* name) override;
    MonoDomain* mono_domain_create_appdomain(const char* domainname, const char* configfile) override;
    void mono_domain_unload(MonoDomain* domain) override;
    MonoObject* mono_object_new(MonoDomain* domain, MonoClass* klass) override;
    void mono_runtime_object_init(MonoObject* this_obj) override;
    MonoObject* mono_runtime_invoke(MonoMethod* method, void* obj, void** params, MonoObject** exc) override;
    void mono_field_set_value(MonoObject* obj, MonoClassField* field, void* value) override;
    void mono_field_get_value(MonoObject* obj, MonoClassField* field, void* value) override;
    int mono_field_get_offset(MonoClassField* field) override;
    MonoClassField* mono_class_get_fields(MonoClass* klass, gpointer* iter) override;
    MonoMethod* mono_class_get_methods(MonoClass* klass, gpointer* iter) override;
    MonoDomain* mono_domain_get() override;
    MonoDomain* mono_get_root_domain() override;
    gint32 mono_domain_get_id(MonoDomain* domain) override;
    void mono_assembly_foreach(GFunc func, gpointer user_data) override;
    void mono_image_close(MonoImage* image) override;
    void mono_unity_socket_security_enabled_set(gboolean b) override;
    const char* mono_image_get_name(MonoImage* image) override;
    MonoClass* mono_get_object_class() override;
    void mono_set_commandline_arguments(int i, const char* argv[], const char* s) override;
    const char* mono_field_get_name(MonoClassField* field) override;
    MonoType* mono_field_get_type(MonoClassField* field) override;
    int mono_type_get_type(MonoType* type) override;
    const char* mono_method_get_name(MonoMethod* method) override;
    MonoImage* mono_assembly_get_image(MonoAssembly* assembly) override;
    MonoClass* mono_method_get_class(MonoMethod* method) override;
    MonoClass* mono_object_get_class(MonoObject* obj) override;
    gboolean mono_class_is_valuetype(MonoClass* klass) override;
    guint32 mono_signature_get_param_count(MonoMethodSignature* sig) override;
    char* mono_string_to_utf8(MonoString* string_obj) override;
    MonoString* mono_string_new_wrapper(const char* text) override;
    MonoClass* mono_class_get_parent(MonoClass* klass) override;
    const char* mono_class_get_namespace(MonoClass* klass) override;
    gboolean mono_class_is_subclass_of(MonoClass* klass, MonoClass* klassc, gboolean check_interfaces) override;
    const char* mono_class_get_name(MonoClass* klass) override;
    char* mono_type_get_name(MonoType* type) override;
    MonoClass* mono_type_get_class(MonoType* type) override;
    MonoException* mono_exception_from_name_msg(MonoImage* image, const char* name_space, const char* name, const char* msg) override;
    void mono_raise_exception(MonoException* ex) override;
    MonoClass* mono_get_exception_class() override;
    MonoClass* mono_get_array_class() override;
    MonoClass* mono_get_string_class() override;
    MonoClass* mono_get_int32_class() override;
    MonoArray* mono_array_new(MonoDomain* domain, MonoClass* eclass, guint32 n) override;
    MonoArray* mono_array_new_full(MonoDomain* domain, MonoClass* array_class, guint32* lengths, guint32* lower_bounds) override;
    MonoClass* mono_array_class_get(MonoClass* eclass, guint32 rank) override;
    gint32 mono_class_array_element_size(MonoClass* ac) override;
    MonoObject* mono_type_get_object(MonoDomain* domain, MonoType* type) override;
    MonoThread* mono_thread_attach(MonoDomain* domain) override;
    void mono_thread_detach(MonoThread* thread) override;
    MonoThread* mono_thread_exit() override;
    MonoThread* mono_thread_current() override;
    void mono_thread_set_main(MonoThread* thread) override;
    void mono_set_find_plugin_callback(gconstpointer method) override;
    void mono_security_enable_core_clr() override;
    bool mono_security_set_core_clr_platform_callback(MonoCoreClrPlatformCB a) override;
    MonoRuntimeUnhandledExceptionPolicy mono_runtime_unhandled_exception_policy_get() override;
    void mono_runtime_unhandled_exception_policy_set(MonoRuntimeUnhandledExceptionPolicy policy) override;
    MonoClass* mono_class_get_nesting_type(MonoClass* klass) override;
    MonoVTable* mono_class_vtable(MonoDomain* domain, MonoClass* klass) override;
    MonoReflectionMethod* mono_method_get_object(MonoDomain* domain, MonoMethod* method, MonoClass* refclass) override;
    MonoMethodSignature* mono_method_signature(MonoMethod* method) override;
    MonoType* mono_signature_get_params(MonoMethodSignature* sig, gpointer* iter) override;
    MonoType* mono_signature_get_return_type(MonoMethodSignature* sig) override;
    MonoType* mono_class_get_type(MonoClass* klass) override;
    void mono_set_ignore_version_and_key_when_finding_assemblies_already_loaded(gboolean value) override;
    void mono_debug_init(int format) override;
    void mono_debug_open_image_from_memory(MonoImage* image, const char* raw_contents, int size) override;
    guint32 mono_field_get_flags(MonoClassField* field) override;
    MonoImage* mono_image_open_from_data_full(const void* data, guint32 data_len, gboolean need_copy, int* status, gboolean ref_only) override;
    MonoImage* mono_image_open_from_data_with_name(char* data, guint32 data_len, gboolean need_copy, int* status, gboolean refonly, const char* name) override;
    MonoAssembly* mono_assembly_load_from(MonoImage* image, const char* fname, int* status) override;
    MonoObject* mono_value_box(MonoDomain* domain, MonoClass* klass, gpointer val) override;
    MonoImage* mono_class_get_image(MonoClass* klass) override;
    char mono_signature_is_instance(MonoMethodSignature* signature) override;
    MonoMethod* mono_method_get_last_managed() override;
    MonoClass* mono_get_enum_class() override;
    MonoType* mono_class_get_byref_type(MonoClass* klass) override;
    void mono_field_static_get_value(MonoVTable* vt, MonoClassField* field, void* value) override;
    void mono_unity_set_embeddinghostname(const char* name) override;
    void mono_set_assemblies_path(const char* name) override;
    guint32 mono_gchandle_new(MonoObject* obj, gboolean pinned) override;
    MonoObject* mono_gchandle_get_target(guint32 gchandle) override;
    guint32 mono_gchandle_new_weakref(MonoObject* obj, gboolean track_resurrection) override;
    MonoObject* mono_assembly_get_object(MonoDomain* domain, MonoAssembly* assembly) override;
    void mono_gchandle_free(guint32 gchandle) override;
    MonoProperty* mono_class_get_properties(MonoClass* klass, gpointer* iter) override;
    MonoMethod* mono_property_get_get_method(MonoProperty* prop) override;
    MonoObject* mono_object_new_alloc_specific(MonoVTable* vtable) override;
    MonoObject* mono_object_new_specific(MonoVTable* vtable) override;
    void mono_gc_collect(int generation) override;
    int mono_gc_max_generation() override;
    MonoAssembly* mono_image_get_assembly(MonoImage* image) override;
    MonoAssembly* mono_assembly_open(const char* filename, int* status) override;
    gboolean mono_class_is_enum(MonoClass* klass) override;
    gint32 mono_class_instance_size(MonoClass* klass) override;
    guint32 mono_object_get_size(MonoObject* obj) override;
    const char* mono_image_get_filename(MonoImage* image) override;
    MonoAssembly* mono_assembly_load_from_full(MonoImage* image, const char* fname, int* status, gboolean refonly) override;
    MonoClass* mono_class_get_interfaces(MonoClass* klass, gpointer* iter) override;
    void mono_assembly_close(MonoAssembly* assembly) override;
    MonoProperty* mono_class_get_property_from_name(MonoClass* klass, const char* name) override;
    MonoMethod* mono_class_get_method_from_name(MonoClass* klass, const char* name, int param_count) override;
    MonoClass* mono_class_from_mono_type(MonoType* image) override;
    gboolean mono_domain_set(MonoDomain* domain, gboolean force) override;
    void mono_thread_push_appdomain_ref(MonoDomain* domain) override;
    void mono_thread_pop_appdomain_ref() override;
    int mono_runtime_exec_main(MonoMethod* method, MonoArray* args, MonoObject** exc) override;
    MonoImage* mono_get_corlib() override;
    MonoClassField* mono_class_get_field_from_name(MonoClass* klass, const char* name) override;
    guint32 mono_class_get_flags(MonoClass* klass) override;
    int mono_parse_default_optimizations(const char* p) override;
    void mono_set_defaults(int verbose_level, guint32 opts) override;
    void mono_set_dirs(const char* assembly_dir, const char* config_dir) override;
    void mono_jit_parse_options(int argc, char* argv[]) override;
    gpointer mono_object_unbox(MonoObject* o) override;
    MonoObject* mono_custom_attrs_get_attr(MonoCustomAttrInfo* ainfo, MonoClass* attr_klass) override;
    gboolean mono_custom_attrs_has_attr(MonoCustomAttrInfo* ainfo, MonoClass* attr_klass) override;
    MonoCustomAttrInfo* mono_custom_attrs_from_field(MonoClass* klass, MonoClassField* field) override;
    MonoCustomAttrInfo* mono_custom_attrs_from_method(MonoMethod* method) override;
    MonoCustomAttrInfo* mono_custom_attrs_from_class(MonoClass* klass) override;
    void mono_custom_attrs_free(MonoCustomAttrInfo* attr) override;
    void g_free(void* p) override;
    gboolean mono_runtime_is_shutting_down() override;
    MonoMethod* mono_object_get_virtual_method(MonoObject* obj, MonoMethod* method) override;
    gpointer mono_jit_info_get_code_start(MonoJitInfo* ji) override;
    int mono_jit_info_get_code_size(MonoJitInfo* ji) override;
    MonoClass* mono_class_from_name_case(MonoImage* image, const char* name_space, const char* name) override;
    MonoClass* mono_class_get_nested_types(MonoClass* klass, gpointer* iter) override;
    int mono_class_get_userdata_offset() override;
    void* mono_class_get_userdata(MonoClass* klass) override;
    void mono_class_set_userdata(MonoClass* klass, void* userdata) override;
    void mono_set_signal_chaining(gboolean chain_signals) override;
    LONG mono_unity_seh_handler(EXCEPTION_POINTERS* ep) override;
    void mono_unity_set_unhandled_exception_handler(void* handler) override;
    MonoObject* mono_runtime_invoke_array(MonoMethod* method, void* obj, MonoArray* params, MonoObject** exc) override;
    char* mono_array_addr_with_size(MonoArray* array, int size, uintptr_t idx) override;
    gunichar2* mono_string_to_utf16(MonoString* string_obj) override;
    MonoClass* mono_field_get_parent(MonoClassField* field) override;
    char* mono_method_full_name(MonoMethod* method, gboolean signature) override;
    MonoObject* mono_object_isinst(MonoObject* obj, MonoClass* klass) override;
    MonoString* mono_string_new_len(MonoDomain* domain, const char* text, guint length) override;
    MonoString* mono_string_from_utf16(gunichar2* data) override;
    MonoException* mono_get_exception_argument_null(const char* arg) override;
    MonoClass* mono_get_boolean_class() override;
    MonoClass* mono_get_byte_class() override;
    MonoClass* mono_get_char_class() override;
    MonoClass* mono_get_int16_class() override;
    MonoClass* mono_get_int64_class() override;
    MonoClass* mono_get_single_class() override;
    MonoClass* mono_get_double_class() override;
    gboolean mono_class_is_generic(MonoClass* klass) override;
    gboolean mono_class_is_inflated(MonoClass* klass) override;
    gboolean unity_mono_method_is_generic(MonoMethod* method) override;
    gboolean unity_mono_method_is_inflated(MonoMethod* method) override;
    gboolean mono_is_debugger_attached() override;
    gboolean mono_assembly_fill_assembly_name(MonoImage* image, MonoAssemblyName* aname) override;
    char* mono_stringify_assembly_name(MonoAssemblyName* aname) override;
    gboolean mono_assembly_name_parse(const char* name, MonoAssemblyName* aname) override;
    MonoAssembly* mono_assembly_loaded(MonoAssemblyName* aname) override;
    int mono_image_get_table_rows(MonoImage* image, int table_id) override;
    MonoClass* mono_class_get(MonoImage* image, guint32 type_token) override;
    gboolean mono_metadata_signature_equal(MonoMethodSignature* sig1, MonoMethodSignature* sig2) override;
    gboolean mono_gchandle_is_in_domain(guint32 gchandle, MonoDomain* domain) override;
    void mono_stack_walk(MonoStackWalk func, gpointer user_data) override;
    char* mono_pmip(void* ip) override;
    MonoObject* mono_runtime_delegate_invoke(MonoObject* delegate, void** params, MonoObject** exc) override;
    MonoJitInfo* mono_jit_info_table_find(MonoDomain* domain, char* addr) override;
    MonoDebugSourceLocation* mono_debug_lookup_source_location(MonoMethod* method, guint32 address, MonoDomain* domain) override;
    void mono_debug_free_source_location(MonoDebugSourceLocation* location) override;
    void mono_gc_wbarrier_generic_store(gpointer ptr, MonoObject* value) override;
    MonoType* mono_class_enum_basetype(MonoClass* klass) override;
    guint32 mono_class_get_type_token(MonoClass* klass) override;
    int mono_class_get_rank(MonoClass* klass) override;
    MonoClass* mono_class_get_element_class(MonoClass* klass) override;
    gboolean mono_unity_class_is_interface(MonoClass* klass) override;
    gboolean mono_unity_class_is_abstract(MonoClass* klass) override;
    gint32 mono_array_element_size(MonoClass* ac) override;
    void mono_config_parse(const char* filename) override;
    void mono_set_break_policy(MonoBreakPolicyFunc policy_callback) override;
    MonoArray* mono_custom_attrs_construct(MonoCustomAttrInfo* cinfo) override;
    MonoCustomAttrInfo* mono_custom_attrs_from_assembly(MonoAssembly* assembly) override;
    MonoArray* mono_reflection_get_custom_attrs_by_type(MonoObject* obj, MonoClass* attr_klass) override;
    MonoLoaderError* mono_loader_get_last_error() override;
    MonoException* mono_loader_error_prepare_exception(MonoLoaderError* error) override;
    MonoDlFallbackHandler* mono_dl_fallback_register(MonoDlFallbackLoad load_func, MonoDlFallbackSymbol symbol_func, MonoDlFallbackClose close_func, void* user_data) override;
    void mono_dl_fallback_unregister(MonoDlFallbackHandler* handler) override;
    LivenessState* mono_unity_liveness_allocate_struct(MonoClass* filter, guint max_count, register_object_callback callback, void* callback_userdata) override;
    void mono_unity_liveness_stop_gc_world() override;
    void mono_unity_liveness_finalize(LivenessState* state) override;
    void mono_unity_liveness_start_gc_world() override;
    void mono_unity_liveness_free_struct(LivenessState* state) override;
    LivenessState* mono_unity_liveness_calculation_begin(MonoClass* filter, guint max_count, register_object_callback callback, void* callback_userdata) override;
    void mono_unity_liveness_calculation_end(LivenessState* state) override;
    void mono_unity_liveness_calculation_from_root(MonoObject* root, LivenessState* state) override;
    void mono_unity_liveness_calculation_from_statics(LivenessState* state) override;
    void mono_trace_set_level_string(const char* value) override;
    void mono_trace_set_mask_string(char* value) override;
    gint64 mono_gc_get_used_size() override;
    gint64 mono_gc_get_heap_size() override;
    MonoMethod* mono_method_desc_search_in_class(MonoMethodDesc* desc, MonoClass* klass) override;
    void mono_method_desc_free(MonoMethodDesc* desc) override;
    char* mono_type_get_name_full(MonoType* type, MonoTypeNameFormat format) override;
    void mono_unity_thread_clear_domain_fields() override;
    void mono_unity_set_vprintf_func(vprintf_func func) override;
    void mono_profiler_install(MonoProfiler* prof, MonoProfileFunc shutdown_callback) override;
    void mono_profiler_set_events(MonoProfileFlags events) override;
    void mono_profiler_install_enter_leave(MonoProfileMethodFunc enter, MonoProfileMethodFunc fleave) override;
    void mono_profiler_install_gc(MonoProfileGCFunc callback, MonoProfileGCResizeFunc heap_resize_callback) override;
    void mono_profiler_install_allocation(MonoProfileAllocFunc callback) override;
    void mono_profiler_install_jit_end(MonoProfileJitResult end) override;
    void mono_profiler_install_exception(MonoProfileExceptionFunc throw_callback, MonoProfileMethodFunc exc_method_leave, MonoProfileExceptionClauseFunc clause_callback) override;
    
protected:
    mono_wrapper::functions_cptr functions() const;

public:
    mono_wrapper::functions_cptr functions_;
};
